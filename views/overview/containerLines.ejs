<%- include("../partials/transactions-header", {user: user}) -%>

<h2><%-containerNo%></h2><br>

<table class="mdl-data-table mdl-js-data-table row-border compact" id="comm-table" style="width:100%">
	<thead>
		<tr>
			<th>BATCH NO.</th>
			<th class="mdl-data-table__cell--non-numeric">TRACKING NO.</th>
			<th>COUNT</th>
			<th class="mdl-data-table__cell--non-numeric">AREA</th>
			<th class="mdl-data-table__cell--non-numeric">SENDER</th>
			<th class="mdl-data-table__cell--non-numeric">RECEIVER</th>
			<th class="mdl-data-table__cell--non-numeric">DELIVERY ADDRESS</th>
			<th class="mdl-data-table__cell--non-numeric">STATUS</th>
			<th class="mdl-data-table__cell--non-numeric">ETA TO PORT</th>
			<th class="mdl-data-table__cell--non-numeric">COMMENTS</th>
			<th class="mdl-data-table__cell--non-numeric">FILES</th>
		</tr>
	</thead>
	<tbody>
	</tbody>
	<tfoot><tr></tr></tfoot> <!-- theres a black border line on bottom of the table without this -->
</table>
</div>

<script>
$(document).ready(function() {
	// Initialise editor
	let editor = new $.fn.dataTable.Editor({
		table: '#comm-table',
		idSrc: "_id",
        // serverSide: true,
		<% if (user.role === "staff") { %>
			fields: [
				{
					label: "Status",
					name: "status.stage",
					type: "select",
					options: [
						"At Departing Port",
						"On Transit",
						"At Destination Port",
						"At Customs",
						"For Dispatch",
						"For Delivery",
						"Delivered"]
				},
				{
					label:"Estimated Arrival Date to Port",
					type: "datetime",
					name: "status.estPortArrivalDate",
					attr: {
						placeholder: "Not set"
					}
				},
				{
					label:"Actual Arrival Date to Port",
					type: "datetime",
					name: "status.actPortArrivalDate",
					attr: {
						placeholder: "Not set"
					}
				},
				{
					label:"Estimated Delivery Date",
					type: "datetime",
					name: "status.estDeliveryDate",
					attr: {
						placeholder: "Not set"
					}
				},
				{
					label:"Actual Delivery Date",
					type: "datetime",
					name: "status.actDeliveryDate",
					attr: {
						placeholder: "Not set"
					}
				},
				{
					label:"Received By",
					type: "text",
					name: "status.receivedBy",
					attr: {
						placeholder: "Not set"
					}
				},
				{
					label: "Delivery Comments",
					name: "commentCategory",
					attr: {
						placeholder: "Not set"
					},
					type: "select",
					options: [
						"Back-load",
						"Un-located address",
						"Consignee not available",
						"Inclement weather conditions",
						"Delivery vehicle breakdown",
						"Other"
					]
				},
				{
					label: "Additional Comments",
					name: "comment",
					attr: {
						placeholder: "Not set"
					}
				},
				{
					label: "Additional Delivery Info",
					name: "status.additionalFiles",
					type: "uploadMany",
					display: function (file) {
						const buttonHref = `<%-id%>/file/${file._id}`;
						const buttonText = file.name;
						return `<a download href=${buttonHref}>${buttonText}</a>`;

					},
					attr: {
						placeholder: "Not set"
					},
					limit: 10,
					ajax: {
						type: 'POST',
						url: `/overview/id/<%-id%>/file`,
						contentType: 'application/json',
						data: (d) => {
							d.rowId = rowID;
							return JSON.stringify(d);
						}
					},
				}
			],
		<% } else { %>
			fields : [
				{
					label: "Batch No.",
					type: "text",
					name: "batchNo",
					attr: {
						placeholder: "Not set"
					}
				},
				{
					label: "Tracking No.",
					type: "text",
					name: "trackingNo",
					attr: {
						placeholder: "Not set"
					}
				},
				{
					label: "Count",
					type: "text",
					name: "count",
					attr: {
						placeholder: "Not set"
					}
				},
				{
					label: "Area",
					type: "text",
					name: "area",
					attr: {
						placeholder: "Not set"
					}
				},
				{
					label: "Sender First Name",
					type: "text",
					name: "sender.firstName",
					attr: {
						placeholder: "Not set"
					}
				},
				{
					label: "Sender Last Name",
					type: "text",
					name: "sender.lastName",
					attr: {
						placeholder: "Not set"
					}
				},
				{
					label: "Receiver First Name",
					type: "text",
					name: "receiver.firstName",
					attr: {
						placeholder: "Not set"
					}
				},
				{
					label: "Receiver Last Name",
					type: "text",
					name: "receiver.lastName",
					attr: {
						placeholder: "Not set"
					}
				},
				{
					label: "Delivery Address",
					type: "text",
					name: "receiver.address",
					attr: {
						placeholder: "Not set"
					}
				}
			],
		<% } %>
        ajax: {
            edit: {
            	type: 'POST',
                url: `/overview/id/<%-id%>`,
				contentType: 'application/json',
                data: (d) => {return JSON.stringify(d.data);}
            }
        }
	});

	// Change rowID based on which row the user wants to edit
	let rowID;
	editor.on( 'initEdit', function () {
		rowID = editor.ids( true );
	});

	// Listen for removal of remove file button
	// editor.field('status.additionalFiles').input().on('upload.editor', function (event, value) {
	// 	console.log('Upload done');
	// 	console.log(`event ${event}`);
	// 	console.log(`value ${value}`);
	//
	// });

	// Create Settings button
	$.fn.dataTable.ext.buttons.settings = {
		text: 'Settings',
		action: function ( e, dt, node, config ) {
			window.location.replace(window.location.href + "/settings");
		}
	};

	console.log(<%-contentArray%>);

	// Initialise data table
	let table = $('#comm-table').DataTable({
		"search" : {
			"caseInsensitive": true,
			"smart": false,
			"regex": true
		},
		dom: '<lBfr<t>ip>',
		buttons: [
            'selectAll',
			{ extend: "edit",   editor: editor },
			{extend:'settings', text:'Container Settings'},
			'excel',
			{extend:'pdf', text: 'PDF Form'},
			{extend: 'colvis', text:'Show/Hide Columns'}
	    ],
        lengthMenu: [[25, 50,100, -1], [25, 50,100, "All"]],
		paginate: true,
		processing: true,
		select: true,
		stateSave: true,
		"data":<%- contentArray %>,
		deferRender: true,
		"deferLoading":<%-contentArray.length%>,
        columnDefs: [
			{
				targets: "_all",
				className: 'dt-left',
			}
        ],
		"columns": [
				{
					"data": "batchNo",
					"defaultContent": "<i>Not set</i>"
				},
				{
					"data": "trackingNo",
					"defaultContent": "<i>Not set</i>"
				},
				{
					"data": "count",
					"defaultContent": "<i>Not set</i>"
				},
				{
					"data": "area",
					"defaultContent": "<i>Not set</i>"
				},
				{
					"data": null,
					render: function (data, type, row) {
						let firstName = row.sender.firstName;
						let lastName = row.sender.lastName;

						if (firstName === undefined && lastName === undefined) {
							return "<i>Not set</i>";
						} else if (firstName === undefined) {
							return lastName;
						} else if (lastName === undefined) {
							return firstName;
						} else {
							return `${firstName} ${lastName}`;
						}
					}
				},
				{
					"data": null,
					render: function (data, type, row) {
						let firstName = row.receiver.firstName;
						let lastName = row.receiver.lastName;

						if (firstName === undefined && lastName === undefined) {
							return "<i>Not set</i>";
						} else if (firstName === undefined) {
							return lastName;
						} else if (lastName === undefined) {
							return firstName;
						} else {
							return `${firstName} ${lastName}`;
						}
					}
				},
				{
					"data": null,
					render: function (data,type,row) {
						let address = row.receiver.address;
						return address !== undefined ? address.toString() : "<i>Not set</i>";
					},
				},
				{
					"data": "status.stage",
					"defaultContent": "<i>Not set</i>"
				},
				{
					"data": "status.estPortArrivalDate",
					render: function(data, type, row) {
						let estPortArrivalDate = row.status.estPortArrivalDate;

						if (estPortArrivalDate) {
							let date = new Date(estPortArrivalDate);
							return date.toDateString();
						} else {
							return "<i>Not set</i>";
						}
					},
				},
				{
					"data": "comment",
					"defaultContent": ""
				},
				{
					"data": "status.additionalFiles",
					"defaultContent": "No files",
					render: function (data,type,row) {
						const files = row.status.additionalFiles;

						if (files) return files.length === 0 ? 'No files' : `${files.length} files`;
					}
				}
			],
	});


});


$(function () {
	// add color to different tracking statuses
	$('td:contains("At Departing Port")').addClass('atDepartingPort');
	$('td:contains("On Transit")').addClass('onTransit');
	$('td:contains("At Destination Port")').addClass('atDestinationPort');
	$('td:contains("At Customs")').addClass('atCustoms');
	$('td:contains("For Dispatch")').addClass('forDispatch');
	$('td:contains("For Delivery")').addClass('forDelivery');
	$('td:contains("Delivered")').addClass('delivered');
});

</script>
<%- include("../partials/footer") -%>

