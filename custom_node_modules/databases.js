const mongoose = require('mongoose');
const Schema = mongoose.Schema;

// Connection URL
const url = 'mongodb+srv://nchong128:apple123@cluster0-7jrih.mongodb.net';
const databaseName = "balikbayanDB";
mongoose.connect(`${url}/${databaseName}`, {useNewUrlParser: true});

// Flags
let flags = require('country-flags-svg');

let _ = require('lodash');

/***************** SCHEMAS AND MODELS *****************/
// Create sender schema and model
const senderSchema = new mongoose.Schema({
	_id: Schema.Types.ObjectId,
	lastName: {
		type: String,
		required: true
	},
	firstName: {
		type: String,
		required: true
	},
	middleName: String,
	address: String,
	transactionHolder: {
		type: Schema.Types.ObjectId,
		ref: 'Transaction'
	}
});

const Sender = mongoose.model("Sender", senderSchema);

// Create receiver schema and model
const receiverSchema = new mongoose.Schema({
	_id: Schema.Types.ObjectId,
	lastName: {
		type: String,
		required: true
	},
	firstName: {
		type: String,
		required: true
	},
	middleName: String,
	address: String,
	transactionHolder: {
		type: Schema.Types.ObjectId,
		ref: 'Transaction'
	}
});

const Receiver = mongoose.model("Receiver", receiverSchema);

// Create transaction schema and model
const transactionSchema = new mongoose.Schema({
	_id: Schema.Types.ObjectId,
	count: Number, 
	batchNo: Number,
	trackingNumber: {
		type: String,
		required: true
	},
	area: String,
	status: String,
	sender_link: {
		type: Schema.Types.ObjectId,
		ref: 'Sender'
	},
	receiver_link: {
		type: Schema.Types.ObjectId,
		ref: 'Receiver'
	},
	grouped_by: {
		type: Schema.Types.ObjectId,
		ref: 'Container'
	}
});

const Transaction = mongoose.model("Transaction", transactionSchema);

// Create container schema and model
const containerSchema = new mongoose.Schema({
	transactions: [{
		type: Schema.Types.ObjectId,
		ref: 'Transaction'
	}],
	shipmentDeparture: Date,
	shipmentArrival: Date,
	shipName: String
});

const Container = mongoose.model("Container", containerSchema);

/***************** EXPORT FUNCTIONS *****************/
exports.parseJsonWorkbook = function(jsonWorkbook) {
	/* 
		Params:
			jsonWorkbook: Object containing sheet info to be processed
		Returns:
			metadata: Object containing info about the info saved into the database
	*/

   let summary = {
		containersAdded: 0,
		sendersAdded: 0,
		receiversAdded: 0,
		transactionsAdded:0
   };

   // Iterate over every sheet in jsonWorkbook
   for (let sheet in jsonWorkbook) {
	   // Obtain array of rows
	   let arrayOfRows = jsonWorkbook[sheet];

	   if (arrayOfRows.length == 0) {
		   console.log(`Sheet ${sheet} is empty. Skipping...`);
		   continue;
	   } else {
		   console.log(`Sheet ${sheet} is being processed...`);
	   }

	   // Obtain header row
	   let headerRow = [];
	   for (let columnName in arrayOfRows[0]) {
		   headerRow.push(columnName);
	   }
	   summary.headerRow = headerRow;

	   // Iterate over every row
	   let transactionArray = [];

	   // Create container
	   let container = new Container({
		   transactions: []
	   });

	   for (let i = 1; i < arrayOfRows.length; i++) {
			let row = arrayOfRows[i];

			// Create sender object
			let sender = new Sender ({
				_id: new mongoose.Types.ObjectId(),
				lastName: row["Last Name"],
				firstName: row["First Name"], 
				middleName: row["Middle Name"],
				address: row["Address"]
			});
		
			// Create receiver object
			let receiver = new Receiver({
				_id: new mongoose.Types.ObjectId(),
				lastName: row["Last Name_1"],
				firstName: row["First Name_1"], 
				middleName: row["Middle Name_1"],
				address: row["Address_1"],
			});

			let transaction = new Transaction ({
				_id: new mongoose.Types.ObjectId(),
				count: row["Count"],
				batchNo: row["Batch No."],
				trackingNumber: row["Tracking No."],
				area: row["Area"],
				status: "",
				sender_link: sender._id,
				receiver_link: receiver._id
			});

			// Add transaction to transactionArray
			container.transactions.push(transaction);

			// Save models to DB
			sender.save(); receiver.save(); transaction.save();

			// Increment counts
			summary.sendersAdded ++; summary.transactionsAdded ++; summary.receiversAdded ++;
	   }

		// Save container
		container.save();

		// Increment counts
		summary.containersAdded ++;
	}
	return summary;
};

exports.findStatus = function(trackingNum) {
	/*
	Params:
		trackingNumber: String containing tracking number to find status
	Returns:
		Promise: with the status
	*/

	return new Promise(function (resolve, reject) {
		Transaction.find({trackingNumber: trackingNum}, 'status', (err, docs) => {
			if (docs.length > 0) {
				let status = docs[0].status;
				resolve(status);
			} else {
				reject("No results returned");
			}
		});
	});
};

getCountriesAux = function() {
	let usCountry = {
		name: 'United States',
		freightCount: 50040
	};
	usCountry.lowName = encodeURIComponent(usCountry.name);
	usCountry.flagUrl = flags.findFlagUrlByCountryName(usCountry.name);

	let ausCountry = {
		name: 'Australia',
		freightCount: 2000
	};
	ausCountry.lowName = encodeURIComponent(ausCountry.name);
	ausCountry.flagUrl = flags.findFlagUrlByCountryName(ausCountry.name);

	let brazilCountry = {
		name: 'Brazil',
		freightCount: 20
	};

	brazilCountry.lowName = encodeURIComponent(brazilCountry.name);
	brazilCountry.flagUrl = flags.findFlagUrlByCountryName(brazilCountry.name);

	let spainCountry = {
		name: 'Spain',
		freightCount: 121
	};

	spainCountry.lowName = encodeURIComponent(spainCountry.name);
	spainCountry.flagUrl = flags.findFlagUrlByCountryName(spainCountry.name);

	let totalArray = [usCountry, ausCountry, brazilCountry, spainCountry];
	return totalArray;
}

exports.getCountries = function() {
	//prolly gonna be ISO code in the future
	return getCountriesAux();
};

sampleCompaniesAux = function() {
	let sampleCompany1 = {
		name: "Super Freight",
		containerQuantity: 300
	};

	sampleCompany1.lowName = encodeURIComponent(sampleCompany1.name);

	let sampleCompany2 = {
		name: "FreightWise",
		containerQuantity: 1000000
	};

	sampleCompany2.lowName = encodeURIComponent(sampleCompany2.name);

	let sampleCompany3 = {
		name: "JumpStart",
		containerQuantity: 3
	};

	sampleCompany3.lowName = encodeURIComponent(sampleCompany3.name);

	let sampleCompany4 = {
		name: "SuperFly",
		containerQuantity: 2322
	};

	sampleCompany4.lowName = encodeURIComponent(sampleCompany4.name);
	let sampleCompany5 = {
		name: "FreightSmart",
		containerQuantity: 1005
	};

	sampleCompany5.lowName = encodeURIComponent(sampleCompany5.name);

	let sampleCompany6 = {
		name: "ZoomDelivery",
		containerQuantity: 3500
	};

	sampleCompany6.lowName = encodeURIComponent(sampleCompany6.name);

	let sampleCompany7 = {
		name: "RadixFreight",
		containerQuantity: 40000
	};

	sampleCompany7.lowName = encodeURIComponent(sampleCompany7.name);

	let sampleCompany8 = {
		name: "FreightPlus",
		containerQuantity: 60700
	};

	sampleCompany8.lowName = encodeURIComponent(sampleCompany8.name);

	let sampleCompanyArr = [sampleCompany1, sampleCompany2, sampleCompany3, sampleCompany4, sampleCompany5, sampleCompany6,sampleCompany7, sampleCompany8];

	return sampleCompanyArr;
}

exports.getPhManifestFiles = function(countryName) {
	let companiesArray = sampleCompaniesAux();

	let results = [];

	let file1 = {
		name: companiesArray[0].name,
		date: "16-3-2019",
		transaction: companiesArray[0].containerQuantity
	};

	let file2 = {
		name: companiesArray[0].name,
		date: "15-1-2019",
		transaction: companiesArray[0].containerQuantity + 400
	};

	let file3 = {
		name: companiesArray[1].name,
		date: "15-2-2019",
		transaction: companiesArray[1].containerQuantity - 50000
	};

	let file4 = {
		name: companiesArray[1].name,
		date: "16-12-2018",
		transaction: companiesArray[1].containerQuantity - 30000
	};

	file1.manifestId = countryName;
	file2.manifestId = countryName;
	file3.manifestId = countryName;
	file4.manifestId = countryName;

	results = [
		file1, file2, file3, file4
	];
	return results
};

exports.getForeignManifestFiles = function() {
	let companiesArray = sampleCompaniesAux();
	let results = [];

	let file1 = {
		name: 'SuperFreight',
		date: "16-3-2019",
		transaction: companiesArray[0].containerQuantity + 3000
	};

	let file2 = {
		name: 'SuperFreight',
		date: "15-1-2019",
		transaction: companiesArray[0].containerQuantity + 4000
	};

	let file3 = {
		name: 'SuperFreight',
		date: "15-2-2019",
		transaction: companiesArray[0].containerQuantity + 50000
	};

	let file4 = {
		name: 'SuperFreight',
		date: "16-12-2018",
		transaction: companiesArray[0].containerQuantity + 30000
	};

	file1.manifestId = file1.date;
	file2.manifestId = file2.date;
	file3.manifestId = file3.date;
	file4.manifestId = file4.date;

	results = [
		file1, file2, file3, file4
	];

	return results
};


exports.getContainers = async function() {
	console.log("begin get containers"	);

	return Container.find({}, 'transactions').populate({
		path: 'transactions',
		populate: {path: 'sender_link receiver_link'}
	});

};

exports.updateEntries = async function(array) {
	console.log("begin updating for array");

	for (let i = 0; i < array.length; i++) {
		let entry = array[i];
		console.log(`Updating ${entry.newStatus}`);

		await Transaction.updateOne({_id: entry._id}, {status: entry.newStatus}, (err, res) => {
			if (err) {
				return err;
			}
			console.log("update successful");
		});
	}

}