const mongoose = require('mongoose');

// Connection URL
const url = 'mongodb://localhost:27017';
mongoose.connect(url + "/balikbayanDB", {useNewUrlParser: true});

/***************** SCHEMAS AND MODELS *****************/
// Create sender schema and model
const senderSchema = new mongoose.Schema({
	lastName: String,
	firstName: String, 
	middleName: String,
	address: String,
	suburb: String,
	city: String,
	postCode: String,
	region: String,
	country: String,
	DOB: String,
	phoneNumber: String,
	email: String
});

const Sender = mongoose.model("Sender", senderSchema);

// Create receiver schema and model
const receiverSchema = new mongoose.Schema({
	lastName: String,
	firstName: String, 
	middleName: String,
	address: String,
	city: String,
	province: String,
	country: String,
	DOB: String,
	phoneNumber: String,
	email: String
});

const Receiver = mongoose.model("Receiver", receiverSchema);

// Create transaction schema and model
const transactionSchema = new mongoose.Schema({
	count: Number,
	noOfBoxes: Number,
	status: String,
	sender: senderSchema,
	receiver: receiverSchema
});

const Transaction = mongoose.model("Transaction", transactionSchema);

/***************** EXPORT FUNCTIONS *****************/
exports.parseJsonWorkbook = function(jsonWorkbook) {
	/* 
		Params:
			jsonWorkbook: Object containing sheet info to be processed
		Returns:
			metadata: Object containing info about the info saved into the database
	*/

   let summary = {
		sheetsProcessed: 0,
		sendersAdded: 0,
		receiversAdded: 0,
		transactionsAdded:0
   };

   // Iterate over every sheet in jsonWorkbook
   for (let sheet in jsonWorkbook) {
		summary.sheetsProcessed ++;

	   // Obtain array of rows
	   let arrayOfRows = jsonWorkbook[sheet];

	   if (arrayOfRows.length == 0) {
		   console.log(`Sheet ${sheet} is empty. Skipping...`);
		   continue;
	   }

	   // Obtain header row
	   let headerRow = [];
	   for (let columnName in arrayOfRows[0]) {
		   headerRow.push(columnName);
		}
		summary.headerRow = headerRow;
		
		// Iterate over every row
		for (let i = 0; i < arrayOfRows.length; i++) {
			let row = arrayOfRows[i];
			console.log(`Processing row ${row}`);

			// Create sender object
			let sender = new Sender ({
				lastName: row["Last Name"],
				firstName: row["First Name"], 
				middleName: row["Middle Name"],
				address: row["Address"],
				suburb: row["Suburb"],
				city: row["City"],
				postCode: row["Postal Code"],
				region: row["Region"],
				country: row["Country"],
				DOB: row["DOB (mm/dd/yyyy)"],
				phoneNumber: row["Mobile/Tel Nos."],
				email: row["Email Address"]
			});
		
			// Create receiver object
			let receiver = new Receiver({
				lastName: row["Last Name_1"],
				firstName: row["First Name_1"], 
				middleName: row["Middle Name_1"],
				address: row["Address_1"],
				city: row["City_1"],
				province: row["Province"],
				country: row["Country_1"],
				DOB: row["DOB (mm/dd/yyyy)_1"],
				phoneNumber: row["Contact Number/s"],
				email: row["Email Address_1"]
			});

			let transaction = new Transaction ({
				count: row["Count"],
				noOfBoxes: row["No. Of Boxes"],
				status: "",
				sender: sender,
				receiver: receiver
			});

			// Save models to DB
			sender.save(); receiver.save(); transaction.save();

			// Increment counts
			summary.sendersAdded ++; summary.transactionsAdded ++; summary.receiversAdded ++;
		}
	}
	return summary;
}