const mongoose = require('mongoose');

// Connection URL
const url = 'mongodb+srv://nchong128:apple123@cluster0-7jrih.mongodb.net';
const databaseName = "balikbayanDB";
mongoose.connect(`${url}/${databaseName}`, {useNewUrlParser: true});

// Flags
let flags = require('country-flags-svg');

let _ = require('lodash');

/***************** SCHEMAS AND MODELS *****************/
// Create sender schema and model
const senderSchema = new mongoose.Schema({
	lastName: String,
	firstName: String, 
	middleName: String,
	address: String,
});

const Sender = mongoose.model("Sender", senderSchema);

// Create receiver schema and model
const receiverSchema = new mongoose.Schema({
	lastName: String,
	firstName: String, 
	middleName: String,
	address: String,
});

const Receiver = mongoose.model("Receiver", receiverSchema);

// Create transaction schema and model
const transactionSchema = new mongoose.Schema({
	count: Number, 
	batchNo: Number,
	trackingNumber: String,
	area: String,
	status: String,
	sender: senderSchema,
	receiver: receiverSchema 
});

const Transaction = mongoose.model("Transaction", transactionSchema);

// Create container schema and model
const containerSchema = new mongoose.Schema({
	transaction: Array,
	shipmentDeparture: Date,
	shipmentArrival: Date,
	shipName: String
});

const Container = mongoose.model("Container", containerSchema);

/***************** EXPORT FUNCTIONS *****************/
exports.parseJsonWorkbook = function(jsonWorkbook) {
	/* 
		Params:
			jsonWorkbook: Object containing sheet info to be processed
		Returns:
			metadata: Object containing info about the info saved into the database
	*/

   let summary = {
		containersAdded: 0,
		sendersAdded: 0,
		receiversAdded: 0,
		transactionsAdded:0
   };

   // Iterate over every sheet in jsonWorkbook
   for (let sheet in jsonWorkbook) {
	   // Obtain array of rows
	   let arrayOfRows = jsonWorkbook[sheet];

	   if (arrayOfRows.length == 0) {
		   console.log(`Sheet ${sheet} is empty. Skipping...`);
		   continue;
	   } else {
		   console.log(`Sheet ${sheet} is being processed...`);
	   }

	   // Obtain header row
	   let headerRow = [];
	   for (let columnName in arrayOfRows[0]) {
		   headerRow.push(columnName);
		}
		summary.headerRow = headerRow;
		
		// Iterate over every row
		let transactionArray = [];

		for (let i = 1; i < arrayOfRows.length; i++) {
			let row = arrayOfRows[i];

			// Create sender object
			let sender = new Sender ({
				lastName: row["Last Name"],
				firstName: row["First Name"], 
				middleName: row["Middle Name"],
				address: row["Address"]
			});
		
			// Create receiver object
			let receiver = new Receiver({
				lastName: row["Last Name_1"],
				firstName: row["First Name_1"], 
				middleName: row["Middle Name_1"],
				address: row["Address_1"],
			});

			let transaction = new Transaction ({
				count: row["Count"],
				batchNo: row["Batch No."],
				trackingNumber: row["Tracking No."],
				area: row["Area"],
				status: "",
				sender: sender,
				receiver: receiver
			});

			// Add transaction to transactionArray
			transactionArray.push(transaction);

			// Save models to DB
			sender.save(); receiver.save(); transaction.save();


			// Increment counts
			summary.sendersAdded ++; summary.transactionsAdded ++; summary.receiversAdded ++;
		}

		// Create and save container
		let container = new Container({
			transaction: transactionArray
		});

		container.save();

		// Increment counts
		summary.containersAdded ++;
	}
	return summary;
};

exports.findStatus = function(trackingNum) {
	/*
	Params:
		trackingNumber: String containing tracking number to find status
	Returns:
		Promise: with the status
	*/

	return new Promise(function (resolve, reject) {
		Transaction.find({trackingNumber: trackingNum}, 'status', (err, docs) => {
			if (docs.length > 0) {
				let status = docs[0].status;
				resolve(status);
			} else {
				reject("No results returned");
			}
		});
	});
};

getCountriesAux = function() {
	let usCountry = {
		name: 'United States',
		freightCount: 50040
	};
	usCountry.lowName = encodeURIComponent(usCountry.name);
	usCountry.flagUrl = flags.findFlagUrlByCountryName(usCountry.name);

	let ausCountry = {
		name: 'Australia',
		freightCount: 2000
	};
	ausCountry.lowName = encodeURIComponent(ausCountry.name);
	ausCountry.flagUrl = flags.findFlagUrlByCountryName(ausCountry.name);

	let brazilCountry = {
		name: 'Brazil',
		freightCount: 20
	};

	brazilCountry.lowName = encodeURIComponent(brazilCountry.name);
	brazilCountry.flagUrl = flags.findFlagUrlByCountryName(brazilCountry.name);

	let spainCountry = {
		name: 'Spain',
		freightCount: 121
	};

	spainCountry.lowName = encodeURIComponent(spainCountry.name);
	spainCountry.flagUrl = flags.findFlagUrlByCountryName(spainCountry.name);

	let totalArray = [usCountry, ausCountry, brazilCountry, spainCountry];
	return totalArray;
}

exports.getCountries = function() {
	//prolly gonna be ISO code in the future
	return getCountriesAux();
};

exports.getCompanies = function(countryName) {
	let totalArray = getCountriesAux();
	// Sample companies
	let sampleCompany1 = {
		name: "Super Freight",
		containerQuantity: 300
	};

	sampleCompany1.lowName = encodeURIComponent(sampleCompany1.name);

	let sampleCompany2 = {
		name: "FreightWise",
		containerQuantity: 1000000
	};

	sampleCompany2.lowName = encodeURIComponent(sampleCompany2.name);

	let sampleCompany3 = {
		name: "JumpStart",
		containerQuantity: 3
	};

	sampleCompany3.lowName = encodeURIComponent(sampleCompany3.name);

	let sampleCompany4 = {
		name: "SuperFly",
		containerQuantity: 2322
	};

	sampleCompany4.lowName = encodeURIComponent(sampleCompany4.name);
	let sampleCompany5 = {
		name: "FreightSmart",
		containerQuantity: 1005
	};

	sampleCompany5.lowName = encodeURIComponent(sampleCompany5.name);

	let sampleCompanyArr = [sampleCompany1, sampleCompany2, sampleCompany3, sampleCompany4, sampleCompany5];

	for (country of totalArray) {
		if (country.name == countryName) {
			console.log(`Match found for country ${country.name}`);
			return sampleCompanyArr;
		}
	}
};

exports.getContainers = function() {
	console.log("begin get containers");

	return Container.find({}, 'transaction', (err, docs) => {
		console.log('end get containers');
	});

};

exports.updateEntries = function() {
	console.log("begin updating");

}