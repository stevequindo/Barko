/***************** CONSTANTS AND NODE REQS*****************/
const mongoose = require('mongoose');

// Connection URL
const url = 'mongodb+srv://nchong128:apple123@cluster0-7jrih.mongodb.net';
const databaseName = "balikbayanDB";
mongoose.connect(`${url}/${databaseName}`, {
	useNewUrlParser: true,
	useFindAndModify: false
});

// Flags
let flags = require('country-flags-svg');
let _ = require('lodash');

// Import models
const schema = require("./models/dbSchema");
const Container = schema.Container;
const ContainerLine = schema.ContainerLine;
const User = require('./models/users');

/***************** FUNCTIONS *****************/
exports.parseJsonWorkbook = function(jsonWorkbook, userReq) {
	/*
	This function processes a spreadsheet's contents and uploads it into the database

	Error Handling:
		- Skips over empty sheets
		- TODO: Adjust error handling for when sender/receiver has no last name or first name
	Params:
		jsonWorkbook: Object containing sheet info to be processed
	Returns:
		Object containing statistics about the process
	*/

	// summary object for statistics
   let summary = {
		containersAdded: 0,
		sendersAdded: 0,
		receiversAdded: 0,
		transactionsAdded:0,
	   	emptySheets: 0,
   };

   // Iterate over every sheet in the excel file
   for (let sheet in jsonWorkbook) {
	   // Obtain array of spreadsheet rows
	   let arrayOfRows = jsonWorkbook[sheet];

	   // Update statistics
	   if (arrayOfRows.length == 0) {
		   console.log(`Sheet ${sheet} is empty. Skipping...`);
		   summary.emptySheets ++;
		   continue;
	   } else {
		   console.log(`Sheet ${sheet} is being processed...`);
		   summary.containersAdded ++;
	   }

	   // Iterate over every row
	   let transactionArray = [];

	   // Create container
	   let container = new Container({
		   _id: new mongoose.Types.ObjectId(),
		   dateAdded: new Date(),
		   dateLastAccessed: new Date(),
		   containerLine: []
	   });

	   // Add access based on uploader's role
	   if (userReq.local.role === "overseas") {
	       container.overseasAccess = userReq._id;

	   } else if (userReq.local.role === "staff") { //TODO: Change to "local" when doing whole refactor
		   container.localAccess = userReq._id;
	   }

	   // Iterate over every row (besides the header row)
	   for (let i = 0; i < arrayOfRows.length; i++) {
		   let row = arrayOfRows[i];

		   // Get departure and arrival country based on first row
		   if (i === 0) {
		       container.departureCountry = row["Country"];
		       container.targetCountry = row["Country_1"];
		   }

		   // Create ContainerLine object
		   let containerLine = new ContainerLine({
			   _id: new mongoose.Types.ObjectId(),
			   count: row["Count"],
			   batchNo: row["Batch No."],
			   trackingNo: row["Tracking No."],
			   area: row["Area"],
			   status: {
			   	   stage: "At Departing Port"
			   },
			   sender: {
				   firstName: row["First Name"],
				   middleName: row["Middle Name"],
				   lastName: row["Last Name"],
				   address: row["Address"],
				   suburb: row["Suburb"],
				   city: row["City"],
				   postCode: row["Postal Code"],
				   region: row["Region"],
				   country: row["Country"],
				   dob: row["DOB (mm/dd/yyyy)"],
				   mobileNo: row["Mobile/Tel Nos."],
				   email: row['Email Address']
			   },
			   receiver: {
				   firstName: row["First Name_1"],
				   middleName: row["Middle Name_1"],
				   lastName: row["Last Name_1"],
				   address: row["Address_1"],
				   city: row["City_1"],
				   province: row["Province"],
				   country: row["Country_1"],
				   contactNo: row["Contact Number/s"],
				   email: row['Email Address_1']
			   }
		   });

		   // Add ContainerLine instance to Container instance
		   container.containerLine.push(containerLine);

		   // Increment counts
		   summary.sendersAdded++; summary.transactionsAdded++; summary.receiversAdded++;
	   }

		// Save container
		container.save().catch((e) => {throw Error(e)});

	   console.log(`Finished processing for ${sheet}`);
	}
	return summary;
};

// exports.findStatus = function(trackingNum) {
	/*
	This function finds the status of an existing transaction based on the tracking number

	Params:
		trackingNumber: String containing tracking number to find status
	Returns:
		Promise: with the status in the resolution. Or else it rejects with the message
	*/

// 	return new Promise(function (resolve, reject) {
// 		Transaction.find({trackingNumber: trackingNum}, 'status', (err, docs) => {
// 			if (docs.length > 0) {
// 				let status = docs[0].status;
// 				resolve(status);
// 			} else {
// 				reject("No results returned");
// 			}
// 		});
// 	});
// };

exports.findStatusNew = function(trackingNum, Surname) {
	/*
	This function finds the status of an existing transaction based on the tracking number and surname

	Params:
		trackingNo: String containing tracking number to find status
		Surname: String containing sender's surname to find status
	Returns:
		Promise: with the status in the resolution. Or else it rejects with the message
	*/
	return new Promise(function (resolve, reject) {

		ContainerLine.find({trackingNo: trackingNum}, 'status sender', (err, docs) => {
			if (docs.length > 0) {
				let status = docs[0].status.stage;
				let lastName = docs[0].sender.lastName;

				if(Surname.toLowerCase() === lastName.toLowerCase()) {
					resolve(status);
				}
			} else {
				reject("No results returned");
			}
		});
	});
};

exports.findSender = function(trackingNum) {
	/*
	This function finds the sender of an existing transaction based on the tracking number

	Params:
		trackingNumber: String containing tracking number to find status
	Returns:
		Promise: with the status in the resolution. Or else it rejects with the message
	*/
	return new Promise(function (resolve, reject) {

		let sender_link;
		Transaction.find({trackingNumber: trackingNum}, 'sender_link', (err, docs) => {
			if (docs.length > 0) {
				sender_link = docs[0].sender_link;

				Sender.find({_id: sender_link}, 'firstName lastName', (err, docs) => {
					if (docs.length > 0) {
						let firstName = docs[0].firstName;
						let lastName = docs[0].lastName;
						let Name = firstName + " " + lastName;
						resolve(Name);

					} else {
						reject("No results returned");
					}
				});
			} else {
				reject("No results returned");
			}
		});
	});
};

exports.findReceiver = function(trackingNum) {
	/*
	This function finds the receiver of an existing transaction based on the tracking number

	Params:
		trackingNumber: String containing tracking number to find status
	Returns:
		Promise: with the status in the resolution. Or else it rejects with the message
	*/
	return new Promise(function (resolve, reject) {

		let receiver_link;
		Transaction.find({trackingNumber: trackingNum}, 'receiver_link', (err, docs) => {
			if (docs.length > 0) {
				receiver_link = docs[0].receiver_link;

				Receiver.find({_id: receiver_link}, 'firstName lastName', (err, docs) => {
					if (docs.length > 0) {
						let firstName = docs[0].firstName;
						let lastName = docs[0].lastName;
						let Name = firstName + " " + lastName;
						resolve(Name);

					} else {
						reject("No results returned");
					}
				});
			} else {
				reject("No results returned");
			}
		});
	});
};


exports.getCountries = function(userReq) {
	// Get all the countries associated with the given user and aggregate into different countries
	return new Promise((resolve, reject) => {
		if (userReq.local.role === "staff") {
			Container.aggregate()
				.match({localAccess: userReq._id})
				.project("departureCountry")
				.group({_id: "$departureCountry",  numOfContainers: {$sum : 1}})
				.exec((err, doc) => {
					if (err) reject(err);
					doc.forEach((item) => {
						item.flagUrl = flags.findFlagUrlByCountryName(item._id);
					});
					resolve(doc);
				});
		} else if (userReq.local.role === "overseas") {
			Container.aggregate()
				.match({localAccess: userReq._id})
				.project("targetCountry")
				.group({_id: "$targetCountry",  numOfContainers: {$sum : 1}})
				.exec((err, doc) => {
					if (err) reject(err);
					doc.forEach((item) => {
						item.flagUrl = flags.findFlagUrlByCountryName(item._id);
					});
					resolve(doc);
				});
		}
	});
};

exports.getContainers = async function(country, userReq) {
	/*
	This function retrieves all of the containers for a given country.

	Params: None
	Return: Promise containing the transactions in the resolution
	 */
	return new Promise( (resolve, reject) => {
		if (userReq.local.role === "staff") {
			Container.aggregate()
				.match({
					departureCountry: {$regex: new RegExp('^' + country, 'i')},
					localAccess: userReq._id
				})
				.project({
					dateAdded: 1,
					overseasAccess: 1
				})
				.then((res, err) => {
					// Add name to the manifest files
					res.forEach((line) => {
						if (line.hasOwnProperty("overseasAccess")) {
							line.name = User.findById(line.overseasAccess);
						} else {
							line.name = "Unknown"
						}
					});
					resolve(res);
				});
		} else if (userReq.local.role === "overseas") {
			Container.aggregate()
				.match({
					departureCountry: {$regex: new RegExp('^' + country, 'i')},
					overseasAccess: userReq._id
				})
				.project({
					dateAdded: 1,
					localAccess: 1
				})
				.then((res, err) => {
					// Add name to the manifest files
					// TODO: Fix some convalescence here with the datatables
					res.forEach((line) => {
						if (line.hasOwnProperty("localAccess")) {
							line.name = User.findById(line.localAccess);
						} else {
							line.name = "Unknown"
						}
					});
					resolve(res);
				});
		}
	});
};

exports.getContainerSettings = async function(containerId, userData) {
	return new Promise((resolve, reject) => {
		if (userData.local.role === "staff") {
			// Return settings for given container
			Container
				.findOne({_id: containerId, localAccess: userData._id})
				.populate('localAccess overseasAccess')
				.exec((err, docs) => {
					if (err) throw err;
					resolve(docs);
				});
		} else if (userData.local.role === "overseas") {
		}
	});
};

exports.updateContainerSettings = function(containerId, data, userData) {
	if (userData.local.role === "staff") {
		User.findOne({"local.email" : data.overseasAccountEmail, "local.role": "overseas"}, (err,docs) => {
			if (err) throw err;

			// Now set the foreign company
			if (docs !== undefined) {
				Container.findOneAndUpdate({_id: containerId}, {overseasAccess: docs._id}, (err, docs) => {
					if (err) throw err;
				})
			}
		});
	}
};

exports.getContainerLines = async function(containerId, userData) {
	/*
	This function retrieves all of the transactions for a given container ID(usually given by the link).
	Also updates the container's last accessed date.

	Params:
	Return: Promise containing the transactions in the resolution
 	*/
	Container.updateOne({_id: containerId});

	if (userData.local.role === "staff") {
		// Now return the container lines for the given container
		return Container.findOneAndUpdate(
			{_id: containerId, localAccess: userData._id},
			{dateLastAccessed: new Date()},
			{fields : "containerLine"});
	} else if (userData.local.role === "overseas") {
		// Now return the container lines for the given container
		return Container.findOneAndUpdate(
			{_id: containerId, overseasAccess: userData._id},
			{dateLastAccessed: new Date()},
			{fields : "containerLine"});
	}
};

exports.getLatestTransactionInfo = function() {
	/*
	// TODO: NEED TO SET QUERY TO INCLUDE ONLY THE USER'S ID
	This function returns the _id and country of the most recent manifest. The most recent manifest is determined by
	either the last accessed or the last created (last created having a higher priority).

	Return: Object containing _id and departureCountry
	Params: None
	 */

	// // Check for all containers, the container with the latest Date for either the dateLastAccessed or dateAdded
	return Container.findOne({}, '_id departureCountry', {sort: {dateLastAccessed : -1}});
};

exports.updateEntries = async function(obj, userData, containerId) {
	/*
	This function updates the status and comments of specified rows

	Params:
		- obj: Object with key as the transaction's _id and value as the info to be updated
	Returns:
		- Object containing the updated transactions
	 */

	let resultJSON = {
		data: []
	};

	if (userData.local.role === "staff") {
		let container = await Container.findOne({"_id" : containerId});

		// Iterate over every _id value
		for (let id in obj) {
			const newStatus = obj[id].status.stage;
			const newEstPortArrivalDate = obj[id].status.estPortArrivalDate;
			const newComment = obj[id].comment;

			let resultsObj = {
				_id: id,
				comment: newComment
			};
			resultsObj.status = {
				stage: newStatus,
				estPortArrivalDate: newEstPortArrivalDate
			};

			resultJSON.data.push(resultsObj);

			// Update the Transaction with the new info
			await Container.findOneAndUpdate({ "_id": containerId, "containerLine._id": id },
				{
					"$set": {
						"containerLine.$.status.stage": newStatus,
						"containerLine.$.status.estPortArrivalDate": newEstPortArrivalDate,
						"containerLine.$.comment": newComment,
					}
			});
		}
		return resultJSON;
	} else if (userData.local.role === "overseas") {

	}
};